{"version":3,"sources":["Keywords.js"],"names":[],"mappings":"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","file":"Keywords-compiled.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Table, Button, FormGroup, FormControl, ControlLabel, Glyphicon, Panel} from 'react-bootstrap'\nimport {getAllKeywords, deleteKeyword} from '../actions'\n\nclass Keywords extends React.Component {\n  constructor(props) {\n    super(props)\n    this._create_del_button = this._create_del_button.bind(this)\n    this._create_edit_button = this._create_edit_button.bind(this)\n  }\n\n  componentWillMount() {\n    this.props.getAllKeywords()\n  }\n\n  _pre_image_loader() {\n    return (<div className='uil-ring-css'/>)\n  }\n\n  _create_edit_button(metacontent, i){\n    let data = {\n      data: {i, metacontent}\n    }\n    return (\n      <Button {...data} bsStyle=\"primary\" onClick={function() {\n\n      }}><Glyphicon glyph=\"pencil\" />\n      </Button>\n    )\n  }\n\n  _create_del_button(metacontent){\n    let self = this\n    let data = {\n      data: {metacontent}\n    }\n    return (\n      <Button {...data} bsStyle=\"danger\" onClick={function() {\n        self.props.deleteKeyword(metacontent)\n      }}><Glyphicon glyph=\"minus\" />\n      </Button>\n    )\n  }\n\n  render() {\n    let {keywords, channels} = this.props.data\n    let self = this\n    return (\n      <Panel>\n        <Button bsStyle=\"primary\" href=\"/metacontents/create\">Create</Button>\n        {(this.props.children)? null :\n          <Table striped bordered condensed hover responsive>\n            <thead>\n            <tr>\n              <th>Created At</th>\n              <th>Keyword</th>\n              <th>Channel</th>\n              <th>Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {(!keywords) ? null :\n              (keywords.map(function(keyword, i) {\n                return (\n                  <tr key={keyword.id}>\n                    <td>{!(keyword.createdAt)? null : keyword.createdAt}</td>\n                    <td>{!(keyword.keyword)? null : keyword.keyword}</td>\n                    <td>{(channels) ? channels.filter(channel => channel.id === keyword.ChannelId)[0].name : null}</td>\n                    <td>\n                      {self._create_edit_button(keyword, i)}\n                      {self._create_del_button(keyword)}\n                    </td>\n                  </tr>\n                )\n              }))}\n            </tbody>\n          </Table>}\n        {this.props.children}\n      </Panel>\n    )\n  }\n}\nKeywords.propTypes = {\n  data : React.PropTypes.object,\n  dispatch: React.PropTypes.func,\n  getAllKeywords: React.PropTypes.func.isRequired,\n  deleteKeyword: React.PropTypes.func.isRequired,\n  children: React.PropTypes.object,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  getAllKeywords,\n  deleteKeyword,\n})(Keywords)\n"]}