{"version":3,"sources":["EditMetacontent.js"],"names":[],"mappings":"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","file":"EditMetacontent-compiled.js","sourcesContent":["import React, {Component, ReactDOM} from 'react'\nimport {connect} from 'react-redux'\nimport {Panel, Button, Checkbox, FormGroup, FormControl, ControlLabel, Form, FieldGroup} from 'react-bootstrap'\nimport {putMetacontent, createMetacontent, editMetacontent} from '../actions'\n\nclass EditMetacontent extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {search_term:\"\",\n      name: '',\n      description: '',\n      url: '',\n      image: '',\n      channel: 0,\n      category: 'location',\n      last_search_us: Date.now(),\n      live_search_typing: false,\n      vne: true,\n      dtri: false,\n      vnn: true,\n      thn: true,\n    }\n    this._edit_metacontent = this._edit_metacontent.bind(this)\n  }\n\n  componentWillMount() {\n    this.props.editMetacontent(this.props.params.metacontent_id)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let {metacontent} = nextProps.data\n    if (metacontent) {\n      this.setState({\n        name: metacontent.name,\n        description: metacontent.description,\n        url: metacontent.url,\n        image: metacontent.image,\n        channel: metacontent.ChannelId,\n        category: metacontent.category,\n        search_term: \"\",\n      })\n    }\n  }\n\n  _setState(field, event) {\n    let object = {}\n    object[field] = (event.target.checked) ? event.target.checked : event.target.value\n    this.setState(object)\n  }\n\n  _edit_metacontent() {\n    let self = this\n    let {channels} = this.props.data\n    return (\n        <Panel header={\"Form\"}>\n          <Form>\n            <FormGroup controlId=\"formControlsTextarea\">\n              <ControlLabel>Name</ControlLabel>\n              <FormControl componentClass=\"textarea\" ref={(ref) => self.mtName = ref} placeholder=\"Name\"\n                           value={self.state.name} onChange={self._setState.bind(self, 'name')}/>\n            </FormGroup>\n            <FormGroup controlId=\"formControlsTextarea\">\n              <ControlLabel>Description</ControlLabel>\n              <FormControl componentClass=\"textarea\" ref={(ref) => self.mtDescription = ref} placeholder=\"Description\"\n                           value={self.state.description} onChange={self._setState.bind(self, 'description')}/>\n            </FormGroup>\n            <FormGroup controlId=\"formControlsTextarea\">\n              <ControlLabel>Image</ControlLabel>\n              <FormControl componentClass=\"textarea\" ref={(ref) => self.mtImage = ref} placeholder=\"Image\"\n                           value={self.state.image} onChange={self._setState.bind(self, 'image')}/>\n            </FormGroup>\n            <FormGroup controlId=\"formControlsTextarea\">\n              <ControlLabel>URL</ControlLabel>\n              <FormControl componentClass=\"textarea\" ref={(ref) => self.mtUrl = ref} placeholder=\"URL\"\n                           value={self.state.url} onChange={self._setState.bind(self, 'url')}/>\n            </FormGroup>\n            <ControlLabel>Loại</ControlLabel>\n            <FormControl componentClass=\"select\" bsStyle=\"primary\" ref={(ref) => self.mtCate = ref} placeholder=\"Loại\"\n                         onChange={self._setState.bind(self, 'category')} value={self.state.category} >\n              <option value=\"location\">Địa danh</option>\n              <option value=\"person\">Nhân vật</option>\n              <option value=\"organization\">Tổ chức</option>\n              <option value=\"article\">Bài viết</option>\n            </FormControl>\n            <FormGroup controlId=\"formControlsSelect\">\n              <ControlLabel>Kênh</ControlLabel>\n              <FormControl componentClass=\"select\" ref={(ref) => self.mtChannel = ref} placeholder=\"Kênh\"\n                           onChange={self._setState.bind(self, 'channel')} value={self.state.channel}>\n                {(!channels)? null : channels.map(function(channel, index) {\n                  return (<option key={channel.id} value={channel.id}>{channel.name}</option>)\n                })}\n              </FormControl>\n            </FormGroup>\n\n            <Button bsStyle=\"primary\" onClick={self._submit.bind(self)}>\n              Submit\n            </Button>\n          </Form>\n        </Panel>\n    )\n  }\n\n  _submit() {\n    let metacontent = {\n      id: this.props.data.metacontent.id,\n      name: this.state.name,\n      description: this.state.description,\n      url: this.state.url,\n      image: this.state.image,\n      channel_id: this.mtChannel.props.children.filter(channel_option => {\n        return channel_option.key == this.state.channel\n      })[0].key,\n      category: this.state.category,\n    }\n    this.props.putMetacontent(metacontent)\n  }\n\n  render() {\n    return this._edit_metacontent()\n  }\n}\n\nEditMetacontent.propTypes = {\n  data : React.PropTypes.object,\n  dispatch: React.PropTypes.func,\n  createMetacontent: React.PropTypes.func.isRequired,\n  putMetacontent: React.PropTypes.func.isRequired,\n  editMetacontent: React.PropTypes.func.isRequired,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  createMetacontent,\n  putMetacontent,\n  editMetacontent,\n})(EditMetacontent)\n"]}