{"version":3,"sources":["Channels.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;IAEM,Q;;;AACL,mBAAa,KAAb,EAAoB;AAAA;;AAAA,gHACb,KADa;;AAEnB,QAAK,mBAAL,GAA2B,MAAK,mBAAL,CAAyB,IAAzB,OAA3B;AACA,QAAK,iBAAL,GAAyB,MAAK,iBAAL,CAAuB,IAAvB,OAAzB;AACA,QAAK,wBAAL,GAAgC,MAAK,wBAAL,CAA8B,IAA9B,OAAhC;AAJmB;AAKnB;;;;uCAEoB;AAClB,QAAK,KAAL,CAAW,eAAX;AACD;;;sCAEkB,O,EAAS,C,EAAE;AAC9B,OAAI,OAAO;AACV,UAAM,EAAC,IAAD,EAAI,gBAAJ;AADI,IAAX;AAGA,UACC;AAAA;AAAA,+BAAY,IAAZ,IAAkB,SAAQ,SAA1B,EAAoC,SAAS,mBAAW,CACvD,CADD;AAAA;AAAA,IADD;AAKA;;;qCAEkB,O,EAAS,C,EAAE;AAC7B,OAAI,OAAO;AACV,UAAM,EAAC,IAAD,EAAI,gBAAJ;AADI,IAAX;AAGA,UACC;AAAA;AAAA,+BAAY,IAAZ,IAAkB,SAAQ,QAA1B,EAAmC,SAAS,mBAAW,CACtD,CADD;AAAA;AAAA,IADD;AAKA;;;sCAEmB;AACnB,UAAQ,uCAAK,WAAU,cAAf,GAAR;AACA;;;6CAE0B;AAAA,OACrB,aADqB,GACJ,KAAK,KAAL,CAAW,IADP,CACrB,aADqB;;AAE1B,OAAI,OAAO,IAAX;AACA,UACC;AAAA;AAAA;AACC;AAAA;AAAA,OAAQ,SAAQ,SAAhB,EAA0B,SAAS,mBAAM;AAAC,mCAAe,IAAf,CAAoB,iBAApB;AAAuC,OAAjF;AAAA;AAAA,KADD;AAGC;AAAA;AAAA,OAAO,aAAP,EAAe,cAAf,EAAwB,eAAxB,EAAkC,WAAlC;AACC;AAAA;AAAA;AACC;AAAA;AAAA;AACC;AAAA;AAAA;AAAA;AAAA,QADD;AAEC;AAAA;AAAA;AAAA;AAAA,QAFD;AAGC;AAAA;AAAA;AAAA;AAAA,QAHD;AAIC;AAAA;AAAA;AAAA;AAAA;AAJD;AADD,MADD;AASC;AAAA;AAAA;AACE,OAAC,aAAF,GAAmB,IAAnB,GACE,cAAc,GAAd,CAAkB,UAAS,OAAT,EAAkB,CAAlB,EAAqB;AACzC,cACC;AAAA;AAAA,UAAI,KAAK,QAAQ,EAAjB;AACC;AAAA;AAAA;AAAK,iBAAQ;AAAb,SADD;AAEC;AAAA;AAAA;AAAK,iBAAQ;AAAb,SAFD;AAGC;AAAA;AAAA;AACC;AAAA;AAAA;AACC,gBAAK,QAAQ,IADd;AAEC,oBAAS,gBAAM,GAAN,CAAU,GAFpB;AAGC,sBAAW,KAAK,iBAHjB;AAIE,eAAK;AAJP;AADD,SAHD;AAWC;AAAA;AAAA;AACE,cAAK,mBAAL,CAAyB,OAAzB,EAAkC,CAAlC,CADF;AAEE,cAAK,kBAAL,CAAwB,OAAxB,EAAiC,CAAjC;AAFF;AAXD,QADD;AAkBA,OAnBE;AAFH;AATD;AAHD,IADD;AAwCA;;;2BAEQ;AACR,UAAO,KAAK,wBAAL,EAAP;AACA;;;EArFqB,gBAAM,S;;AAuF7B,SAAS,SAAT,GAAqB;AACpB,OAAO,gBAAM,SAAN,CAAgB,MADH;AAEpB,WAAU,gBAAM,SAAN,CAAgB,IAFN;AAGnB,kBAAiB,gBAAM,SAAN,CAAgB,IAAhB,CAAqB;AAHnB,CAArB;;AAMA;AACA,SAAS,MAAT,CAAiB,KAAjB,EAAwB;AACtB,QAAO;AACL,QAAM;AADD,EAAP;AAGD;;AAED;kBACe,yBAAQ,MAAR,EAAgB;AAC7B;AAD6B,CAAhB,EAEZ,QAFY,C","file":"Channels-compiled.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Table, Button, FormGroup, FormControl, ControlLabel, Panel} from 'react-bootstrap'\nimport ImageLoader from 'react-imageloader'\nimport {getChannelsList} from '../actions'\nimport {browserHistory} from 'react-router'\n\nclass Channels extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis._create_edit_button = this._create_edit_button.bind(this)\n\t\tthis._pre_image_loader = this._pre_image_loader.bind(this)\n\t\tthis._show_channels_component = this._show_channels_component.bind(this)\n\t}\n\n\tcomponentWillMount() {\n    this.props.getChannelsList()\n  }\n\n\t_create_edit_button(channel, i){\n\t\tlet data = {\n\t\t\tdata: {i, channel}\n\t\t}\n\t\treturn (\n\t\t\t<Button {...data} bsStyle=\"primary\" onClick={function() {\n\t\t\t}}>Edit\n\t\t\t</Button>\n\t\t)\n\t}\n\n\t_create_del_button(channel, i){\n\t\tlet data = {\n\t\t\tdata: {i, channel}\n\t\t}\n\t\treturn (\n\t\t\t<Button {...data} bsStyle=\"danger\" onClick={function() {\n\t\t\t}}>Delete\n\t\t\t</Button>\n\t\t)\n\t}\n\n\t_pre_image_loader() {\n\t\treturn (<div className='uil-ring-css'/>)\n\t}\n\n\t_show_channels_component() {\n\t\tlet {channels_list} = this.props.data\n\t\tlet self = this\n\t\treturn (\n\t\t\t<Panel>\n\t\t\t\t<Button bsStyle=\"primary\" onClick={() => {browserHistory.push('channels/create')}}>Create</Button>\n\n\t\t\t\t<Table striped bordered condensed hover>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t\t<th>KÃªnh</th>\n\t\t\t\t\t\t\t<th>Icon</th>\n\t\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{(!channels_list) ? null :\n\t\t\t\t\t  (channels_list.map(function(channel, i) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={channel.id}>\n\t\t\t\t\t\t\t\t<td>{channel.id}</td>\n\t\t\t\t\t\t\t\t<td>{channel.name}</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<ImageLoader\n\t\t\t\t\t\t\t\t\t\tsrc={channel.icon}\n\t\t\t\t\t\t\t\t\t\twrapper={React.DOM.div}\n\t\t\t\t\t\t\t\t\t\tpreloader={self._pre_image_loader}>\n\t\t\t\t\t\t\t\t\t\t{self._pre_image_loader}\n\t\t\t\t\t\t\t\t\t</ImageLoader>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t{self._create_edit_button(channel, i)}\n\t\t\t\t\t\t\t\t\t{self._create_del_button(channel, i)}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t}))}\n\t\t\t\t\t</tbody>\n\n\t\t\t\t</Table>\n      </Panel>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn this._show_channels_component()\n\t}\n}\nChannels.propTypes = {\n\tdata : React.PropTypes.object,\n\tdispatch: React.PropTypes.func,\n  getChannelsList: React.PropTypes.func.isRequired,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  getChannelsList\n})(Channels)\n"]}