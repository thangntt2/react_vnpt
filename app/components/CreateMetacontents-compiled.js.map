{"version":3,"sources":["CreateMetacontents.js"],"names":[],"mappings":"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","file":"CreateMetacontents-compiled.js","sourcesContent":["import React, {Component, ReactDOM} from 'react'\nimport {connect} from 'react-redux'\nimport {Button, FormGroup, FormControl, ControlLabel, Form, FieldGroup} from 'react-bootstrap'\nimport {searchWikiMetacontents, searchNewsMetacontents, queryWikiMetacontents} from '../apis/Metacontents'\nimport Select from 'react-select'\nimport {submitMetacontent, createMetacontent} from '../actions'\n\nclass CreateMetacontent extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n    this.state ={search_term:\"\",\n      name: '',\n      description: '',\n      url: '',\n      image: '',\n      channel: 0,\n      category: 'Location',\n    }\n\t\tthis._create_metacontent = this._create_metacontent.bind(this)\n\t}\n\n  componentWillMount() {\n    this.props.createMetacontent()\n  }\n\n  componentWillReceiveProps() {\n    if (this.props.data.metacontent)\n      this.setState({\n        name: this.props.data.metacontent.name,\n        description: this.props.data.metacontent.description,\n        url: this.props.data.metacontent.url,\n        image: this.props.data.metacontent.image,\n        channel: this.props.data.metacontent.channel,\n        category: this.props.data.metacontent.category,\n      })\n  }\n\n  _onChange(value) {\n    this.setState({\n      search_term: value\n    })\n    queryWikiMetacontents(value.value)\n      .then(value => {\n        this.setState({\n          name : value.name,\n          description: value.description,\n          url : value.url,\n          image: value.image,\n        })\n      })\n  }\n\n  _getEntities(inputText) {\n    return searchWikiMetacontents(inputText)\n      .then(res => {\n        let ret = res.map(function(entity) {\n          return {value: entity, label: entity}\n        })\n        return {options: ret}\n      })\n  }\n\n  _setState(field, event) {\n    var object = {}\n    if (field === 'channel') {\n      object[field] = event.target.value\n    } else\n      object[field] = event.target.value\n    this.setState(object)\n  }\n\n\t_create_metacontent() {\n\t  let self = this\n    let {channels} = this.props.data\n\t\treturn (\n\t\t\t<div className='box-body'>\n        <Select.Async\n          value={self.state.search_term}\n          ref=\"live_search_input\"\n          onChange={self._onChange.bind(self)}\n          loadOptions={self._getEntities.bind(self)}\n          minimumInput={3}\n          valueKey=\"value\" labelKey=\"label\"\n          backspaceRemoves={false}\n          ignoreAccents={false}\n        />\n        <Form>\n          <FormGroup controlId=\"formControlsTextarea\">\n            <ControlLabel>Name</ControlLabel>\n            <FormControl componentClass=\"textarea\" ref={(ref) => self.mtName = ref} placeholder=\"Name\"\n                         value={self.state.name} onChange={self._setState.bind(self, 'name')}/>\n          </FormGroup>\n          <FormGroup controlId=\"formControlsTextarea\">\n            <ControlLabel>Description</ControlLabel>\n            <FormControl componentClass=\"textarea\" ref={(ref) => self.mtDescription = ref} placeholder=\"Description\"\n                         value={self.state.description} onChange={self._setState.bind(self, 'description')}/>\n          </FormGroup>\n          <FormGroup controlId=\"formControlsTextarea\">\n            <ControlLabel>Image</ControlLabel>\n            <FormControl componentClass=\"textarea\" ref={(ref) => self.mtImage = ref} placeholder=\"Image\"\n                         value={self.state.image} onChange={self._setState.bind(self, 'image')}/>\n          </FormGroup>\n          <FormGroup controlId=\"formControlsTextarea\">\n            <ControlLabel>URL</ControlLabel>\n            <FormControl componentClass=\"textarea\" ref={(ref) => self.mtUrl = ref} placeholder=\"URL\"\n                         value={self.state.url} onChange={self._setState.bind(self, 'url')}/>\n          </FormGroup>\n          <ControlLabel>Loại</ControlLabel>\n          <FormControl componentClass=\"select\" bsStyle=\"primary\" ref={(ref) => self.mtCate = ref} placeholder=\"Loại\"\n                       onChange={self._setState.bind(self, 'category')} value={self.state.category} >\n            <option value=\"Location\">Địa danh</option>\n            <option value=\"Person\">Nhân vật</option>\n            <option value=\"Organization\">Tổ chức</option>\n            <option value=\"Article\">Bài viết</option>\n          </FormControl>\n          <FormGroup controlId=\"formControlsSelect\">\n            <ControlLabel>Kênh</ControlLabel>\n            <FormControl componentClass=\"select\" ref={(ref) => self.mtChannel = ref} placeholder=\"Kênh\"\n                         onChange={self._setState.bind(self, 'channel')} value={self.state.channel}>\n              {(!channels)? null : channels.map(function(channel, index) {\n                return (<option key={channel.id} value={index}>{channel.name}</option>)\n              })}\n            </FormControl>\n          </FormGroup>\n\n          <Button bsStyle=\"primary\" onClick={self._submit.bind(self)}>\n              Submit\n            </Button>\n        </Form>\n\t\t\t</div>\n\t\t)\n\t}\n\n  _submit() {\n    let metacontent = {\n      name: this.state.name,\n      description: this.state.description,\n      url: this.state.url,\n      image: this.state.image,\n      channel: this.mtChannel.props.children[this.state.channel].key,\n      category: this.state.category,\n    }\n    this.props.submitMetacontent(metacontent)\n  }\n\n\trender() {\n\t\treturn this._create_metacontent()\n\t}\n}\n\nCreateMetacontent.propTypes = {\n\tdata : React.PropTypes.object,\n\tdispatch: React.PropTypes.func,\n  createMetacontent: React.PropTypes.func.isRequired,\n  submitMetacontent: React.PropTypes.func.isRequired,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  createMetacontent,\n  submitMetacontent,\n})(CreateMetacontent)\n"]}