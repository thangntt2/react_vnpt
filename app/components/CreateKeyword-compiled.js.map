{"version":3,"sources":["CreateKeyword.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;IAEM,a;;;AACJ,yBAAa,KAAb,EAAoB;AAAA;;AAAA,uHACZ,KADY;;AAElB,UAAK,KAAL,GAAa;AACX,eAAS,CADE;AAEX,mBAAa,EAFF;AAGX,YAAM;AAHK,KAAb;AAKA,UAAK,mBAAL,GAA2B,MAAK,mBAAL,CAAyB,IAAzB,OAA3B;AAPkB;AAQnB;;;;yCAEoB;AACnB,WAAK,KAAL,CAAW,iBAAX;AACD;;;8BAES,K,EAAO,K,EAAO;AACtB,UAAI,SAAS,EAAb;AACA,aAAO,KAAP,IAAiB,MAAM,MAAN,CAAa,OAAd,GAAyB,MAAM,MAAN,CAAa,OAAtC,GAAgD,MAAM,MAAN,CAAa,KAA7E;AACA,WAAK,QAAL,CAAc,MAAd;AACD;;;oCAEe,K,EAAO;AACrB,UAAI,SAAS,EAAb;AACA,aAAO,KAAP,IAAgB,CAAC,KAAK,KAAL,CAAW,KAAX,CAAjB;AACA,WAAK,QAAL,CAAc,MAAd;AACD;;;0CAEqB;AACpB,UAAI,OAAO,IAAX;AADoB,UAEf,QAFe,GAEH,KAAK,KAAL,CAAW,IAFR,CAEf,QAFe;;AAGpB,aACE;AAAA;AAAA,UAAK,WAAU,UAAf;AACE;AAAA;AAAA,YAAO,QAAQ,SAAf;AACE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAW,WAAU,sBAArB;AACE;AAAA;AAAA;AAAA;AAAA,eADF;AAEE,2EAAa,gBAAe,UAA5B,EAAuC,aAAY,MAAnD;AACa,uBAAO,KAAK,KAAL,CAAW,IAD/B,EACqC,UAAU,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,MAA1B,CAD/C;AAFF,aADF;AAME;AAAA;AAAA,gBAAW,WAAU,oBAArB;AACE;AAAA;AAAA;AAAA;AAAA,eADF;AAEE;AAAA;AAAA,kBAAa,gBAAe,QAA5B,EAAqC,KAAK,aAAC,IAAD;AAAA,2BAAS,KAAK,SAAL,GAAiB,IAA1B;AAAA,mBAA1C,EAAyE,aAAY,MAArF;AACa,4BAAU,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,SAA1B,CADvB,EAC6D,OAAO,KAAK,KAAL,CAAW,OAD/E;AAEI,iBAAC,QAAF,GAAa,IAAb,GAAoB,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB,KAAlB,EAAyB;AACzD,yBAAQ;AAAA;AAAA,sBAAQ,KAAK,QAAQ,EAArB,EAAyB,OAAO,KAAhC;AAAwC,4BAAQ;AAAhD,mBAAR;AACD,iBAFoB;AAFvB;AAFF,aANF;AAgBE;AAAA;AAAA,gBAAQ,SAAQ,SAAhB,EAA0B,SAAS,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAnC;AAAA;AAAA;AAhBF;AADF;AADF,OADF;AA0BD;;;8BAES;AACR,UAAI,UAAU;AACZ,cAAM,KAAK,KAAL,CAAW,IADL;AAEZ,iBAAS,KAAK,SAAL,CAAe,KAAf,CAAqB,QAArB,CAA8B,KAAK,KAAL,CAAW,OAAzC,EAAkD;AAF/C,OAAd;AAIA,WAAK,KAAL,CAAW,aAAX,CAAyB,OAAzB;AACD;;;6BAEQ;AACP,aAAO,KAAK,mBAAL,EAAP;AACD;;;EApEyB,gBAAM,S;;AAuElC,cAAc,SAAd,GAA0B;AACxB,QAAO,gBAAM,SAAN,CAAgB,MADC;AAExB,YAAU,gBAAM,SAAN,CAAgB,IAFF;AAGxB,qBAAmB,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,UAHhB;AAIxB,iBAAe,gBAAM,SAAN,CAAgB,IAAhB,CAAqB;AAJZ,CAA1B;;AAOA;AACA,SAAS,MAAT,CAAiB,KAAjB,EAAwB;AACtB,SAAO;AACL,UAAM;AADD,GAAP;AAGD;;AAED;kBACe,yBAAQ,MAAR,EAAgB;AAC7B,+CAD6B;AAE7B;AAF6B,CAAhB,EAGZ,aAHY,C","file":"CreateKeyword-compiled.js","sourcesContent":["import React, {Component, ReactDOM} from 'react'\nimport {connect} from 'react-redux'\nimport {Panel, Button, Checkbox, FormGroup, FormControl, ControlLabel, Form, FieldGroup} from 'react-bootstrap'\nimport {submitKeyword, createMetacontent} from '../actions'\n\nclass CreateKeyword extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      channel: 0,\n      search_term: '',\n      name: '',\n    }\n    this._create_metacontent = this._create_metacontent.bind(this)\n  }\n\n  componentWillMount() {\n    this.props.createMetacontent()\n  }\n\n  _setState(field, event) {\n    let object = {}\n    object[field] = (event.target.checked) ? event.target.checked : event.target.value\n    this.setState(object)\n  }\n\n  _checkBoxChange(field) {\n    let object = {}\n    object[field] = !this.state[field]\n    this.setState(object)\n  }\n\n  _create_metacontent() {\n    let self = this\n    let {channels} = this.props.data\n    return (\n      <div className='box-body'>\n        <Panel header={\"Keyword\"}>\n          <Form>\n            <FormGroup controlId=\"formControlsTextarea\">\n              <ControlLabel>Name</ControlLabel>\n              <FormControl componentClass=\"textarea\" placeholder=\"Name\"\n                           value={self.state.name} onChange={self._setState.bind(self, 'name')}/>\n            </FormGroup>\n            <FormGroup controlId=\"formControlsSelect\">\n              <ControlLabel>Kênh</ControlLabel>\n              <FormControl componentClass=\"select\" ref={(ref) => self.mtChannel = ref} placeholder=\"Kênh\"\n                           onChange={self._setState.bind(self, 'channel')} value={self.state.channel}>\n                {(!channels)? null : channels.map(function(channel, index) {\n                  return (<option key={channel.id} value={index}>{channel.name}</option>)\n                })}\n              </FormControl>\n            </FormGroup>\n\n            <Button bsStyle=\"primary\" onClick={self._submit.bind(self)}>\n              Submit\n            </Button>\n          </Form>\n        </Panel>\n      </div>\n    )\n  }\n\n  _submit() {\n    let keyword = {\n      name: this.state.name,\n      channel: this.mtChannel.props.children[this.state.channel].key,\n    }\n    this.props.submitKeyword(keyword)\n  }\n\n  render() {\n    return this._create_metacontent()\n  }\n}\n\nCreateKeyword.propTypes = {\n  data : React.PropTypes.object,\n  dispatch: React.PropTypes.func,\n  createMetacontent: React.PropTypes.func.isRequired,\n  submitKeyword: React.PropTypes.func.isRequired,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  createMetacontent,\n  submitKeyword,\n})(CreateKeyword)\n"]}