{"version":3,"sources":["Metacontents.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;IAEM,Y;;;AACJ,wBAAY,KAAZ,EAAmB;AAAA;;AAAA,sHACX,KADW;;AAEjB,UAAK,kBAAL,GAA0B,MAAK,kBAAL,CAAwB,IAAxB,OAA1B;AACA,UAAK,mBAAL,GAA2B,MAAK,mBAAL,CAAyB,IAAzB,OAA3B;AAHiB;AAIlB;;;;yCAEoB;AACnB,WAAK,KAAL,CAAW,kBAAX;AACD;;;wCAEmB;AAClB,aAAQ,uCAAK,WAAU,cAAf,GAAR;AACD;;;wCAEmB,W,EAAa,C,EAAE;AACjC,UAAI,OAAO;AACT,cAAM,EAAC,IAAD,EAAI,wBAAJ;AADG,OAAX;AAGA,aACE;AAAA;AAAA,mCAAY,IAAZ,IAAkB,SAAQ,SAA1B,EAAoC,SAAS,mBAAW;AACtD,wCAAe,IAAf,CAAoB,mBAAiB,YAAY,EAAjD;AACD,WAFD;AAEG,mEAAW,OAAM,QAAjB;AAFH,OADF;AAMD;;;uCAEkB,W,EAAY;AAC7B,UAAI,OAAO,IAAX;AACA,UAAI,OAAO;AACT,cAAM,EAAC,wBAAD;AADG,OAAX;AAGA,aACE;AAAA;AAAA,mCAAY,IAAZ,IAAkB,SAAQ,QAA1B,EAAmC,SAAS,mBAAW;AACrD,iBAAK,KAAL,CAAW,iBAAX,CAA6B,WAA7B;AACD,WAFD;AAEG,mEAAW,OAAM,OAAjB;AAFH,OADF;AAMD;;;6BAEQ;AAAA,wBACwB,KAAK,KAAL,CAAW,IADnC;AAAA,UACF,YADE,eACF,YADE;AAAA,UACY,QADZ,eACY,QADZ;;AAEP,UAAI,OAAO,IAAX;AACA,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAQ,SAAQ,SAAhB,EAA0B,SAAS,mBAAU;AAAE,0CAAe,IAAf,CAAoB,sBAApB;AAA4C,aAA3F;AAAA;AAAA,SADF;AAEI,aAAK,KAAL,CAAW,QAAZ,GAAuB,IAAvB,GACC;AAAA;AAAA,YAAO,aAAP,EAAe,cAAf,EAAwB,eAAxB,EAAkC,WAAlC,EAAwC,gBAAxC;AACE;AAAA;AAAA;AACA;AAAA;AAAA;AACE;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA,eADF;AAEE;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA,eAFF;AAGE;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA,eAHF;AAIE;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA,eAJF;AAKE;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA,eALF;AAME;AAAA;AAAA,kBAAI,WAAU,UAAd;AAAA;AAAA;AANF;AADA,WADF;AAWE;AAAA;AAAA;AACE,aAAC,YAAF,GAAkB,IAAlB,GACE,aAAa,GAAb,CAAiB,UAAS,WAAT,EAAsB,CAAtB,EAAyB;AACzC,qBACE;AAAA;AAAA,kBAAI,KAAK,YAAY,EAArB;AACE;AAAA;AAAA;AAAK,8BAAY;AAAjB,iBADF;AAEE;AAAA;AAAA;AAAK,mBAAE,YAAY,WAAd,GAA4B,IAA5B,GAAmC,YAAY;AAApD,iBAFF;AAGE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,2BAAK,CAAE,YAAY,KAAd,GAAsB,kFAAtB,GACA,YAAY,KAFnB;AAGE,+BAAS,gBAAM,GAAN,CAAU,GAHrB;AAIE,iCAAW,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAJb;AAKG,yBAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B;AALH;AADF,iBAHF;AAYE;AAAA;AAAA;AAAK,mBAAE,QAAF,GAAa,IAAb,GACH,SAAS,MAAT,CAAgB;AAAA,2BAAW,QAAQ,EAAR,KAAe,YAAY,SAAtC;AAAA,mBAAhB,EAAiE,CAAjE,EAAoE;AADtE,iBAZF;AAeE;AAAA;AAAA;AAAK,mBAAE,YAAY,QAAd,GAAyB,IAAzB,GAAgC,YAAY;AAAjD,iBAfF;AAgBE;AAAA;AAAA;AACG,uBAAK,mBAAL,CAAyB,WAAzB,EAAsC,CAAtC,CADH;AAEG,uBAAK,kBAAL,CAAwB,WAAxB;AAFH;AAhBF,eADF;AAuBD,aAxBA;AAFH;AAXF,SAHJ;AA2CG,aAAK,KAAL,CAAW;AA3Cd,OADF;AA+CD;;;EA1FwB,gBAAM,S;;AA4FjC,aAAa,SAAb,GAAyB;AACvB,QAAO,gBAAM,SAAN,CAAgB,MADA;AAEvB,YAAU,gBAAM,SAAN,CAAgB,IAFH;AAGvB,sBAAoB,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,UAHlB;AAIvB,qBAAmB,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,UAJjB;AAKvB,YAAU,gBAAM,SAAN,CAAgB;AALH,CAAzB;;AAQA;AACA,SAAS,MAAT,CAAiB,KAAjB,EAAwB;AACtB,SAAO;AACL,UAAM;AADD,GAAP;AAGD;;AAED;kBACe,yBAAQ,MAAR,EAAgB;AAC7B,iDAD6B;AAE7B;AAF6B,CAAhB,EAGZ,YAHY,C","file":"Metacontents-compiled.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Table, Button, FormGroup, FormControl, ControlLabel, Glyphicon, Panel} from 'react-bootstrap'\nimport {getAllMetacontents, deleteMetacontent} from '../actions'\nimport ImageLoader from 'react-imageloader'\nimport {browserHistory} from 'react-router'\n\nclass Metacontents extends React.Component {\n  constructor(props) {\n    super(props)\n    this._create_del_button = this._create_del_button.bind(this)\n    this._create_edit_button = this._create_edit_button.bind(this)\n  }\n\n  componentWillMount() {\n    this.props.getAllMetacontents()\n  }\n\n  _pre_image_loader() {\n    return (<div className='uil-ring-css'/>)\n  }\n\n  _create_edit_button(metacontent, i){\n    let data = {\n      data: {i, metacontent}\n    }\n    return (\n      <Button {...data} bsStyle=\"primary\" onClick={function() {\n        browserHistory.push('/metacontents/'+metacontent.id)\n      }}><Glyphicon glyph=\"pencil\" />\n      </Button>\n    )\n  }\n\n  _create_del_button(metacontent){\n    let self = this\n    let data = {\n      data: {metacontent}\n    }\n    return (\n      <Button {...data} bsStyle=\"danger\" onClick={function() {\n        self.props.deleteMetacontent(metacontent)\n      }}><Glyphicon glyph=\"minus\" />\n      </Button>\n    )\n  }\n\n  render() {\n    let {metacontents, channels} = this.props.data\n    let self = this\n    return (\n      <Panel>\n        <Button bsStyle=\"primary\" onClick={function(){ browserHistory.push(\"/metacontents/create\")}}>Create</Button>\n        {(this.props.children)? null :\n          <Table striped bordered condensed hover responsive>\n            <thead>\n            <tr>\n              <th className=\"col-md-2\">Name</th>\n              <th className=\"col-md-5\">Description</th>\n              <th className=\"col-md-1\">Image</th>\n              <th className=\"col-md-1\">Channel</th>\n              <th className=\"col-md-1\">Category</th>\n              <th className=\"col-md-2\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {(!metacontents) ? null :\n              (metacontents.map(function(metacontent, i) {\n                return (\n                  <tr key={metacontent.id}>\n                    <td>{metacontent.name}</td>\n                    <td>{!(metacontent.description)? null : metacontent.description}</td>\n                    <td>\n                      <ImageLoader\n                        src={!(metacontent.image)? \"https://d13yacurqjgara.cloudfront.net/users/771923/screenshots/2390842/gif-1.gif\"\n                          : (metacontent.image)}\n                        wrapper={React.DOM.div}\n                        preloader={self._pre_image_loader.bind(self)}>\n                        {self._pre_image_loader.bind(self)}\n                      </ImageLoader>\n                    </td>\n                    <td>{!(channels)? null :\n                      channels.filter(channel => channel.id === metacontent.ChannelId)[0].name\n                    }</td>\n                    <td>{!(metacontent.category)? null : metacontent.category}</td>\n                    <td>\n                      {self._create_edit_button(metacontent, i)}\n                      {self._create_del_button(metacontent)}\n                    </td>\n                  </tr>\n                )\n              }))}\n            </tbody>\n          </Table>}\n        {this.props.children}\n      </Panel>\n    )\n  }\n}\nMetacontents.propTypes = {\n  data : React.PropTypes.object,\n  dispatch: React.PropTypes.func,\n  getAllMetacontents: React.PropTypes.func.isRequired,\n  deleteMetacontent: React.PropTypes.func.isRequired,\n  children: React.PropTypes.object,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  getAllMetacontents,\n  deleteMetacontent,\n})(Metacontents)\n"]}