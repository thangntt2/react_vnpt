{"version":3,"sources":["Metacontents.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;;;IAEM,Y;;;AACJ,wBAAY,KAAZ,EAAmB;AAAA;AAAA,iHACX,KADW;AAElB;;;;yCAEoB;AACnB,WAAK,KAAL,CAAW,kBAAX;AACD;;;wCAEmB;AAClB,aAAQ,uCAAK,WAAU,cAAf,GAAR;AACD;;;6BAEQ;AAAA,UACF,YADE,GACc,KAAK,KAAL,CAAW,IADzB,CACF,YADE;;AAEP,UAAI,OAAO,IAAX;AACA,aACE;AAAA;AAAA,UAAK,WAAU,UAAf;AACE;AAAA;AAAA,YAAQ,SAAQ,SAAhB,EAA0B,MAAK,sBAA/B;AAAA;AAAA,SADF;AAEI,aAAK,KAAL,CAAW,QAAZ,GAAuB,IAAvB,GACC;AAAA;AAAA,YAAO,aAAP,EAAe,cAAf,EAAwB,eAAxB,EAAkC,WAAlC;AACE;AAAA;AAAA;AACA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,eADF;AAEE;AAAA;AAAA;AAAA;AAAA,eAFF;AAGE;AAAA;AAAA;AAAA;AAAA,eAHF;AAIE;AAAA;AAAA;AAAA;AAAA,eAJF;AAKE;AAAA;AAAA;AAAA;AAAA;AALF;AADA,WADF;AAUE;AAAA;AAAA;AACE,aAAC,YAAF,GAAkB,IAAlB,GACE,aAAa,GAAb,CAAiB,UAAS,WAAT,EAAsB,CAAtB,EAAyB;AACzC,qBACE;AAAA;AAAA,kBAAI,KAAK,YAAY,EAArB;AACE;AAAA;AAAA;AAAK,8BAAY;AAAjB,iBADF;AAEE;AAAA;AAAA;AAAK,mBAAE,YAAY,WAAd,GAA4B,IAA5B,GAAmC,YAAY;AAApD,iBAFF;AAGE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,2BAAK,CAAE,YAAY,KAAd,GAAsB,kFAAtB,GACA,YAAY,KAFnB;AAGE,+BAAS,gBAAM,GAAN,CAAU,GAHrB;AAIE,iCAAW,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAJb;AAKG,yBAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B;AALH;AADF,iBAHF;AAYE;AAAA;AAAA;AAAK,mBAAE,YAAY,GAAd,GAAoB,IAApB,GAA2B,YAAY;AAA5C,iBAZF;AAaE;AAAA;AAAA;AAAK,mBAAE,YAAY,QAAd,GAAyB,IAAzB,GAAgC,YAAY;AAAjD;AAbF,eADF;AAiBD,aAlBA;AAFH;AAVF,SAHJ;AAoCG,aAAK,KAAL,CAAW;AApCd,OADF;AAwCD;;;EAxDwB,gBAAM,S;;AA0DjC,aAAa,SAAb,GAAyB;AACvB,QAAO,gBAAM,SAAN,CAAgB,MADA;AAEvB,YAAU,gBAAM,SAAN,CAAgB,IAFH;AAGvB,sBAAoB,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,UAHlB;AAIvB,YAAU,gBAAM,SAAN,CAAgB;AAJH,CAAzB;;AAOA;AACA,SAAS,MAAT,CAAiB,KAAjB,EAAwB;AACtB,SAAO;AACL,UAAM;AADD,GAAP;AAGD;;AAED;kBACe,yBAAQ,MAAR,EAAgB;AAC7B;AAD6B,CAAhB,EAEZ,YAFY,C","file":"Metacontents-compiled.js","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Table, Button, FormGroup, FormControl, ControlLabel} from 'react-bootstrap'\nimport {getAllMetacontents} from '../actions'\nimport ImageLoader from 'react-imageloader'\n\nclass Metacontents extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentWillMount() {\n    this.props.getAllMetacontents()\n  }\n\n  _pre_image_loader() {\n    return (<div className='uil-ring-css'/>)\n  }\n\n  render() {\n    let {metacontents} = this.props.data\n    let self = this\n    return (\n      <div className=\"box-body\">\n        <Button bsStyle=\"primary\" href=\"/metacontents/create\">Create</Button>\n        {(this.props.children)? null :\n          <Table striped bordered condensed hover>\n            <thead>\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n              <th>Image</th>\n              <th>URL</th>\n              <th>Category</th>\n            </tr>\n            </thead>\n            <tbody>\n            {(!metacontents) ? null :\n              (metacontents.map(function(metacontent, i) {\n                return (\n                  <tr key={metacontent.id}>\n                    <td>{metacontent.name}</td>\n                    <td>{!(metacontent.description)? null : metacontent.description}</td>\n                    <td>\n                      <ImageLoader\n                        src={!(metacontent.image)? \"https://d13yacurqjgara.cloudfront.net/users/771923/screenshots/2390842/gif-1.gif\"\n                          : (metacontent.image)}\n                        wrapper={React.DOM.div}\n                        preloader={self._pre_image_loader.bind(self)}>\n                        {self._pre_image_loader.bind(self)}\n                      </ImageLoader>\n                    </td>\n                    <td>{!(metacontent.url)? null : metacontent.url}</td>\n                    <td>{!(metacontent.category)? null : metacontent.category}</td>\n                  </tr>\n                )\n              }))}\n            </tbody>\n          </Table>}\n        {this.props.children}\n      </div>\n    )\n  }\n}\nMetacontents.propTypes = {\n  data : React.PropTypes.object,\n  dispatch: React.PropTypes.func,\n  getAllMetacontents: React.PropTypes.func.isRequired,\n  children: React.PropTypes.object,\n}\n\n// // Which props do we want to inject, given the global state?\nfunction select (state) {\n  return {\n    data: state,\n  }\n}\n\n// Wrap the component to inject dispatch and state into it\nexport default connect(select, {\n  getAllMetacontents\n})(Metacontents)\n"]}