{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AAFA,IAAI,aAAa,QAAQ,YAAR,CAAjB;;;AAIA,IAAI,aAAa,+BAAyB;AACxC,UAAQ,uBADgC;AAExC,YAAU;AAF8B,CAAzB,CAAjB;;AAKA,IAAI,OAAO;AACT;;;;;AAKA,OANS,iBAMF,QANE,EAMQ,QANR,EAMkB;AACzB,QAAI,KAAK,QAAL,EAAJ,EAAqB,OAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;;AAErB,WAAO,WAAW,QAAX,CAAoB,MAApB,CAA2B;AAChC,gBAAU,QADsB;AAEhC,gBAAU,QAFsB;AAGhC,kBAAY;AAHoB,KAA3B,EAIJ,IAJI,CAIC,UAAS,QAAT,EAAmB;AACzB,cAAQ,GAAR,CAAY,aAAa,QAAzB;AACA,mBAAa,QAAb,GAAwB,SAAS,QAAjC;AACA,mBAAa,YAAb,GAA4B,SAAS,YAArC;AACA,aAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD,KATM,EASJ,KATI,CASE,UAAS,GAAT,EAAc;AACrB,cAAQ,KAAR,CAAc,GAAd;AACD,KAXM,CAAP;AAYD,GArBQ;AAsBT,wBAtBS,kCAsBc,KAtBd,EAsBqB;AAC5B,QAAM,UAAU,yBAAO,KAAP,CAAhB;AACA,QAAI,CAAC,oBAAO,GAAZ,EAAiB;AACf,aAAO,IAAP;AACD;AACD,QAAM,OAAO,IAAI,IAAJ,CAAS,CAAT,CAAb;AACA,SAAK,aAAL,CAAmB,QAAQ,GAA3B;AACA,WAAO,IAAP;AACD,GA9BQ;AA+BT,gBA/BS,0BA+BM,KA/BN,EA+Ba;AACpB,QAAM,OAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAb;AACA,QAAM,gBAAgB,CAAtB;AACA,QAAI,QAAQ,IAAZ,EAAkB;AAChB,aAAO,KAAP;AACD;AACD,WAAO,EAAE,KAAK,OAAL,KAAkB,IAAI,IAAJ,GAAW,OAAX,KAAwB,gBAAgB,IAA5D,CAAP;AACD,GAtCQ;;AAuCT;;;AAGA,QA1CS,oBA0CC;AACR,YAAQ,GAAR,CAAY,KAAZ;AACA,WAAO,sBAAY,mBAAW;AAC5B,mBAAa,UAAb,CAAwB,UAAxB;AACA,cAAQ,IAAR;AACD,KAHM,CAAP;AAID,GAhDQ;;AAiDT;;;AAGA,UApDS,sBAoDG;AACV,WAAO,CAAC,CAAC,aAAa,QAAf,IAA2B,CAAC,KAAK,cAAL,CAAoB,aAAa,QAAjC,CAAnC;AACD,GAtDQ;AAuDT,UAvDS,sBAuDG,CAAE;AAvDL,CAAX;;kBA0De,I","file":"index-compiled.js","sourcesContent":["var requestify = require('requestify')\nimport decode from 'jwt-decode';\nimport {AuthenticationClient, DatabaseAuthenticator, OAuthAuthenticator} from 'auth0';\n\nvar authClient = new AuthenticationClient({\n  domain: 'thangntt.au.auth0.com',\n  clientId: 'OTYXYV8Eu0UZ139YKuPk94cX7UhP2pgH'\n});\n\nlet auth = {\n  /**\n  * Logs a user in, returning a promise with `true` when done\n  * @param  {string} username The username of the user\n  * @param  {string} password The password of the user\n  */\n  login (username, password) {\n    if (auth.loggedIn()) return Promise.resolve(true);\n\n    return authClient.database.signIn({\n      username: username,\n      password: password,\n      connection: 'Username-Password-Authentication',\n    }).then(function(userData) {\n      console.log(localStorage.id_token);\n      localStorage.id_token = userData.id_token;\n      localStorage.access_token = userData.access_token;\n      return Promise.resolve(true);\n    }).catch(function(err) {\n      console.error(err);\n    })\n  },\n  getTokenExpirationDate(token) {\n    const decoded = decode(token);\n    if (!decode.exp) {\n      return null;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n    return date;\n  },\n  isTokenExpired(token) {\n    const date = auth.getTokenExpirationDate(token);\n    const offsetSeconds = 0;\n    if (date == null) {\n      return false;\n    }\n    return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n  },\n  /**\n  * Logs the current user out\n  */\n  logout () {\n    console.log('wtf')\n    return new Promise(resolve => {\n      localStorage.removeItem('id_token');\n      resolve(true);\n    })\n  },\n  /**\n  * Checks if a user is logged in\n  */\n  loggedIn () {\n    return !!localStorage.id_token && !auth.isTokenExpired(localStorage.id_token);\n  },\n  onChange () {}\n}\n\nexport default auth\n"]}