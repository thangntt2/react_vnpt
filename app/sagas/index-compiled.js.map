{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// This file contains the sagas used for async actions in our app. It's divided into\n// \"effects\" that the sagas call (`authorize` and `logout`) and the actual sagas themselves,\n// which listen for actions.\n\n// Sagas help us gather all our side effects (network requests in this case) in one place\n\nimport {browserHistory} from 'react-router'\nimport { takeEvery, delay } from 'redux-saga'\nimport {take, call, put, fork, race} from 'redux-saga/effects'\nimport auth from '../auth'\nvar Channels = require('../apis/Channels')\nvar Metacontents = require('../apis/Metacontents')\n\nimport {\n  SENDING_REQUEST,\n  LOGIN_REQUEST,\n  SET_AUTH,\n  LOGOUT,\n  CHANGE_FORM,\n  REQUEST_ERROR,\n  CHANNEL_LIST,\n  CHANNEL_RECV,\n  METACONTENT_ALL,\n  METACONTENT_RECV,\n  SUBMIT_METACONTENT,\n  SUBMIT_METACONTENT_OK,\n  CREATE_METACONTENT,\n  CREATE_METACONTENT_READY,\n  DELETE_METACONTENT,\n  DELETE_METACONTENT_OK,\n} from '../actions/constants'\n\n/**\n * Effect to handle authorization\n * @param  {string} username               The username of the user\n * @param  {string} password               The password of the user\n * @param  {object} options                Options\n * @param  {boolean} options.isRegistering Is this a register request?\n */\nexport function * authorize ({username, password, isRegistering}) {\n  // We send an action that tells Redux we're sending a request\n  yield put({type: SENDING_REQUEST, sending: true})\n\n  // We then try to register or log in the user, depending on the request\n  try {\n    let response\n    response = yield call(auth.login, username, password)\n    return response\n  } catch (error) {\n    console.log('hi')\n    // If we get an error we send Redux the appropiate action and return\n    yield put({type: REQUEST_ERROR, error: error.message})\n\n    return false\n  } finally {\n    // When done, we tell Redux we're not in the middle of a request any more\n    yield put({type: SENDING_REQUEST, sending: false})\n  }\n}\n\n/**\n * Effect to handle logging out\n */\nexport function * logout () {\n  // We tell Redux we're in the middle of a request\n  yield put({type: SENDING_REQUEST, sending: true})\n  yield delay(3000)\n  // Similar to above, we try to log out by calling the `logout` function in the\n  // `auth` module. If we get an error, we send an appropiate action. If we don't,\n  // we return the response.\n  try {\n    let response = yield call(auth.logout)\n    yield put({type: SENDING_REQUEST, sending: false})\n\n    return response\n  } catch (error) {\n    yield put({type: REQUEST_ERROR, error: error.message})\n  }\n}\n\nexport function * getChannelsList() {\n  // We tell Redux we're in the middle of a request\n  yield put({type: SENDING_REQUEST, sending: true})\n  try {\n    let response = yield call(Channels.getChannelsList)\n    yield put({type: SENDING_REQUEST, sending: false})\n\n    return response\n  }  catch (error) {\n    yield put({type: REQUEST_ERROR, error: error.message})\n  }\n}\n\nexport function * channelsFlow() {\n  while (true) {\n    let request = yield take(CHANNEL_LIST)\n\n    let response = yield call(getChannelsList)\n\n    yield put({type: CHANNEL_RECV, channels: response})\n    forwardTo('/channels')\n  }\n}\n\n/**\n * Log in saga\n */\nexport function * loginFlow () {\n  // Because sagas are generators, doing `while (true)` doesn't block our program\n  // Basically here we say \"this saga is always listening for actions\"\n  while (true) {\n    // And we're listening for `LOGIN_REQUEST` actions and destructuring its payload\n    let request = yield take(LOGIN_REQUEST)\n    let {username, password} = request.data\n\n    // A `LOGOUT` action may happen while the `authorize` effect is going on, which may\n    // lead to a race condition. This is unlikely, but just in case, we call `race` which\n    // returns the \"winner\", i.e. the one that finished first\n    let winner = yield race({\n      auth: call(authorize, {username, password, isRegistering: false}),\n      logout: take(LOGOUT)\n    })\n    // If `authorize` was the winner...\n    if (winner.auth) {\n      // ...we send Redux appropiate actions\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized)\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      // forwardTo('/dashboard') // Go to dashboard page\n      // If `logout` won...\n    } else if (winner.logout) {\n      // ...we send Redux appropiate action\n      yield put({type: SET_AUTH, newAuthState: false}) // User is not logged in (not authorized)\n      yield call(logout) // Call `logout` effect\n      forwardTo('/') // Go to root page\n    }\n  }\n}\n\n/**\n * Log out saga\n * This is basically the same as the `if (winner.logout)` of above, just written\n * as a saga that is always listening to `LOGOUT` actions\n */\nexport function * logoutFlow () {\n  while (true) {\n    yield take(LOGOUT)\n    yield put({type: SET_AUTH, newAuthState: false})\n\n    yield call(logout)\n    forwardTo('/')\n  }\n}\n\nexport function * getAllMetacontents() {\n  // We tell Redux we're in the middle of a request\n  yield put({type: SENDING_REQUEST, sending: true})\n  try {\n    let response = yield call(Metacontents.getAllMetacontents)\n    yield put({type: SENDING_REQUEST, sending: false})\n\n    return response\n  }  catch (error) {\n    yield put({type: REQUEST_ERROR, error: error.message})\n  }\n}\n\nexport function * submitMetacontent(metacontent) {\n  yield put({type: SENDING_REQUEST, sending: true})\n  try {\n    let response = yield call(Metacontents.submitMetacontent, metacontent)\n    yield put({type: SENDING_REQUEST, sending: false})\n\n    return response\n  }  catch (error) {\n    yield put({type: REQUEST_ERROR, error: error.message})\n  }\n}\n\nexport function * submitMetacontentFlow() {\n  while (true) {\n    let request = yield take(SUBMIT_METACONTENT)\n\n    let response = yield call(submitMetacontent, request.metacontent)\n\n    yield put({type: SUBMIT_METACONTENT_OK})\n    forwardTo('/metacontents/create')\n  }\n}\n\nexport function * createMetacontentFlow() {\n  while (true) {\n    yield take(CREATE_METACONTENT)\n\n    let channels = yield(call(getChannelsList))\n\n    yield put({type: CREATE_METACONTENT_READY, channels: channels})\n  }\n}\n\nexport function * metacontentsFlow() {\n  while (true) {\n    yield take(METACONTENT_ALL)\n\n    let metacontents = yield(call(getAllMetacontents))\n\n    yield put({type: METACONTENT_RECV, metacontents: metacontents})\n  }\n}\n\nexport function * deleteMetacontent(metacontent) {\n  yield put({type: SENDING_REQUEST, sending: true})\n  try {\n    let response = yield(call(Metacontents.deleteMetacontent, metacontent))\n    yield put({type: SENDING_REQUEST, sending: false})\n\n    return response\n  } catch (error) {\n    yield put({type: REQUEST_ERROR, error: error.message})\n  }\n}\n\nexport function * deleteMetacontentFlow() {\n  while (true) {\n    let request = yield take(DELETE_METACONTENT)\n\n    let response = yield(call(deleteMetacontent, request.metacontent))\n\n    yield put({type: DELETE_METACONTENT_OK, index : request.index})\n  }\n}\n\n// The root saga is what we actually send to Redux's middleware. In here we fork\n// each saga so that they are all \"active\" and listening.\n// Sagas are fired once at the start of an app and can be thought of as processes running\n// in the background, watching actions dispatched to the store.\nexport default function * root () {\n  yield fork(loginFlow)\n  yield fork(logoutFlow)\n  yield fork(channelsFlow)\n  yield fork(metacontentsFlow)\n  yield fork(createMetacontentFlow)\n  yield fork(submitMetacontentFlow)\n  yield fork(deleteMetacontentFlow)\n}\n\n// Little helper function to abstract going to different pages\nfunction forwardTo (location) {\n  browserHistory.push(location)\n}\n"]}