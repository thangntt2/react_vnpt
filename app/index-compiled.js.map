{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,SAAS,2BAAa;AACxB;AACA,aAAW,mBAAC,QAAD,EAAW,MAAX;AAAA,WAAsB,OAAO,IAAP,KAAgB,aAAtC;AAAA;AAFa,CAAb,CAAb;;AAKA,IAAI,iBAAiB,0BAArB;;AAEA;AACA,IAAI,QAAQ,4CAAqB,4BAAgB,MAAhB,EAAwB,cAAxB,CAArB,CAAZ;AACA;AACA,eAAe,GAAf;;AAEA;;;;;AAKA,SAAS,SAAT,CAAoB,SAApB,EAA+B,OAA/B,EAAwC;AAAA,wBACrB,MAAM,QAAN,EADqB;;AAAA,MACjC,QADiC,mBACjC,QADiC;;;AAGtC,QAAM,QAAN,CAAe,0BAAf;;AAEA;AACA;AACA,UAAQ,GAAR,CAAY,UAAU,QAAV,CAAmB,QAA/B;AACA,MAAI,UAAU,QAAV,CAAmB,QAAnB,KAAgC,YAAhC,IACC,UAAU,QAAV,CAAmB,QAAnB,KAAgC,WADjC,IAEG,UAAU,QAAV,CAAmB,QAAnB,KAAgC,eAFnC,IAGK,UAAU,QAAV,CAAmB,QAAnB,KAAgC,sBAHrC,IAIO,UAAU,QAAV,CAAmB,QAAnB,KAAgC,iBAJvC,IAKS,UAAU,QAAV,CAAmB,QAAnB,KAAgC,UAL7C,EAKyD;AACvD,QAAI,QAAJ,EAAc;AACZ,UAAI,UAAU,QAAV,CAAmB,KAAnB,IAA4B,UAAU,QAAV,CAAmB,QAAnD,EAA6D;AAC3D,gBAAQ,UAAU,QAAV,CAAmB,QAA3B;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR;AACD;AACF;AACF,GAbD,MAaO;AACL;AACA,QAAI,CAAC,QAAL,EAAe;AACb,UAAI,UAAU,QAAV,CAAmB,KAAnB,IAA4B,UAAU,QAAV,CAAmB,QAAnD,EAA6D;AAC3D,gBAAQ,UAAU,QAAV,CAAmB,QAA3B;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR;AACD;AACF;AACF;AACF;;AAED;AACA;;IACM,S;;;;;;;;;;6BACM;AACR,aACE;AAAA;AAAA,UAAU,OAAO,KAAjB;AACE;AAAA;AAAA,YAAQ,oCAAR;AACE;AAAA;AAAA,cAAO,wBAAP;AACE,gEAAO,MAAK,GAAZ,EAAgB,yBAAhB,GADF;AAEE,gEAAO,MAAK,OAAZ,EAAoB,0BAApB,GAFF;AAGE;AAAA;AAAA,gBAAO,SAAS,SAAhB;AACE,kEAAO,MAAK,WAAZ,EAAyB,8BAAzB,GADF;AAEE,kEAAO,MAAK,UAAZ,EAAuB,6BAAvB,GAFF;AAGE,kEAAO,MAAK,cAAZ,EAA2B,iCAA3B,GAHF;AAIE,kEAAO,MAAK,sBAAZ,EAAmC,uCAAnC,GAJF;AAKE,kEAAO,MAAK,gBAAZ,EAA6B,kCAA7B,GALF;AAME,kEAAO,MAAK,SAAZ,EAAsB,6BAAtB;AANF,aAHF;AAWE,gEAAO,MAAK,GAAZ,EAAgB,6BAAhB;AAXF;AADF;AADF,OADF;AAmBD;;;;;AAGH,mBAAS,MAAT,CAAgB,8BAAC,SAAD,OAAhB,EAA+B,SAAS,cAAT,CAAwB,KAAxB,CAA/B","file":"index-compiled.js","sourcesContent":["import 'babel-polyfill'\n\nimport React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport {Router, Route, browserHistory, IndexRoute} from 'react-router'\nimport {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport {Provider} from 'react-redux'\nimport createLogger from 'redux-logger'\nimport reducer from './reducers'\nimport rootSaga from './sagas'\nimport {clearError} from './actions'\n\nimport './styles/main.css'\n\nimport App from './components/App'\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Dashboard from './components/Dashboard'\nimport NotFound from './components/NotFound'\nimport Channels from './components/Channels'\nimport CreateMetacontent from './components/CreateMetacontents'\nimport MetaContents from './components/Metacontents'\nimport CreateKeyword from \"./components/CreateKeyword\";\nimport Keywords from \"./components/Keywords\";\n\nlet logger = createLogger({\n  // Ignore `CHANGE_FORM` actions in the logger, since they fire after every keystroke\n  predicate: (getState, action) => action.type !== 'CHANGE_FORM'\n})\n\nlet sagaMiddleware = createSagaMiddleware()\n\n// Creates the Redux store using our reducer and the logger and saga middlewares\nlet store = createStore(reducer, applyMiddleware(logger, sagaMiddleware))\n// We run the root saga automatically\nsagaMiddleware.run(rootSaga)\n\n/**\n* Checks authentication status on route change\n* @param  {object}   nextState The state we want to change into when we change routes\n* @param  {function} replace Function provided by React Router to replace the location\n*/\nfunction checkAuth (nextState, replace) {\n  let {loggedIn} = store.getState()\n\n  store.dispatch(clearError())\n\n  // Check if the path isn't dashboard. That way we can apply specific logic to\n  // display/render the path we want to\n  console.log(nextState.location.pathname)\n  if (nextState.location.pathname !== '/dashboard'\n    && nextState.location.pathname !== '/channels'\n      && nextState.location.pathname !== '/metacontents'\n        && nextState.location.pathname !== '/metacontents/create'\n          && nextState.location.pathname !== '/keyword/create'\n            && nextState.location.pathname !== '/keyword') {\n    if (loggedIn) {\n      if (nextState.location.state && nextState.location.pathname) {\n        replace(nextState.location.pathname)\n      } else {\n        replace('/')\n      }\n    }\n  } else {\n    // If the user is already logged out, forward them to the homepage\n    if (!loggedIn) {\n      if (nextState.location.state && nextState.location.pathname) {\n        replace(nextState.location.pathname)\n      } else {\n        replace('/')\n      }\n    }\n  }\n}\n\n// Mostly boilerplate, except for the routes. These are the pages you can go to,\n// which are all wrapped in the App component, which contains the navigation etc\nclass LoginFlow extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <Router history={browserHistory}>\n          <Route component={App}>\n            <Route path='/' component={Home} />\n            <Route path='login' component={Login} />\n            <Route onEnter={checkAuth}>\n              <Route path=\"dashboard\"  component={Dashboard} />\n              <Route path='channels' component={Channels}/>\n              <Route path='metacontents' component={MetaContents}/>\n              <Route path='/metacontents/create' component={CreateMetacontent}/>\n              <Route path='keyword/create' component={CreateKeyword}/>\n              <Route path='keyword' component={Keywords}/>\n            </Route>\n            <Route path='*' component={NotFound} />\n          </Route>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nReactDOM.render(<LoginFlow />, document.getElementById('app'))\n"]}