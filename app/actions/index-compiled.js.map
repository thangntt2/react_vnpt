{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;QA2BgB,U,GAAA,U;QAQA,Y,GAAA,Y;QAIA,kB,GAAA,kB;QAQA,c,GAAA,c;QAUA,Y,GAAA,Y;QAOA,M,GAAA,M;QAQA,Y,GAAA,Y;QAIA,e,GAAA,e;QAOA,U,GAAA,U;QAIA,iB,GAAA,iB;QAIA,iB,GAAA,iB;QAIA,iB,GAAA,iB;;AA1FhB;;AAgBA;;;;;;AArBA;;;;AAIA;AAuBO,SAAS,UAAT,CAAqB,YAArB,EAAmC;AACxC,SAAO,EAAC,4BAAD,EAAoB,0BAApB,EAAP;AACD;;AAED;;;;AAIO,SAAS,YAAT,CAAuB,YAAvB,EAAqC;AAC1C,SAAO,EAAC,yBAAD,EAAiB,0BAAjB,EAAP;AACD;;AAEM,SAAS,kBAAT,GAA8B;AACnC,SAAO,EAAC,gCAAD,EAAP;AACD;;AAED;;;;AAIO,SAAS,cAAT,CAAyB,OAAzB,EAAkC;AACvC,SAAO,EAAC,gCAAD,EAAwB,gBAAxB,EAAP;AACD;;AAED;;;;;;AAMO,SAAS,YAAT,CAAuB,IAAvB,EAA6B;AAClC,SAAO,EAAC,8BAAD,EAAsB,UAAtB,EAAP;AACD;;AAED;;;AAGO,SAAS,MAAT,GAAmB;AACxB,SAAO,EAAC,uBAAD,EAAP;AACD;;AAED;;;;AAIO,SAAS,YAAT,CAAuB,KAAvB,EAA8B;AACnC,SAAO,EAAC,8BAAD,EAAsB,YAAtB,EAAP;AACD;;AAEM,SAAS,eAAT,GAA4B;AACjC,SAAO,EAAC,6BAAD,EAAP;AACD;;AAED;;;AAGO,SAAS,UAAT,GAAuB;AAC5B,SAAO,EAAC,4BAAD,EAAP;AACD;;AAEM,SAAS,iBAAT,CAA2B,WAA3B,EAAwC;AAC7C,SAAO,EAAC,mCAAD,EAA2B,aAAa,WAAxC,EAAP;AACD;;AAEM,SAAS,iBAAT,GAA6B;AAClC,SAAO,EAAC,mCAAD,EAAP;AACD;;AAEM,SAAS,iBAAT,CAA2B,WAA3B,EAAwC;AAC7C,SAAO,EAAC,mCAAD,EAA2B,aAAa,WAAxC,EAAP;AACD","file":"index-compiled.js","sourcesContent":["/*\n * Actions describe changes of state in your application\n */\n\n// We import constants to name our actions' type\nimport {\n  CHANGE_FORM,\n  SET_AUTH,\n  SENDING_REQUEST,\n  LOGIN_REQUEST,\n  LOGOUT,\n  REQUEST_ERROR,\n  CLEAR_ERROR,\n  CHANNEL_LIST,\n  METACONTENT_ALL,\n  SUBMIT_METACONTENT,\n  CREATE_METACONTENT,\n  DELETE_METACONTENT,\n} from './constants'\nimport {DELETE_CHANNEL} from \"./constants\";\n\n/**\n * Sets the form state\n * @param  {object} newFormState          The new state of the form\n * @param  {string} newFormState.username The new text of the username input field of the form\n * @param  {string} newFormState.password The new text of the password input field of the form\n */\nexport function changeForm (newFormState) {\n  return {type: CHANGE_FORM, newFormState}\n}\n\n/**\n * Sets the authentication state of the application\n * @param  {boolean} newAuthState True means a user is logged in, false means no user is logged in\n */\nexport function setAuthState (newAuthState) {\n  return {type: SET_AUTH, newAuthState}\n}\n\nexport function getAllMetacontents() {\n  return {type: METACONTENT_ALL}\n}\n\n/**\n * Sets the `currentlySending` state, which displays a loading indicator during requests\n * @param  {boolean} sending True means we're sending a request, false means we're not\n */\nexport function sendingRequest (sending) {\n  return {type: SENDING_REQUEST, sending}\n}\n\n/**\n * Tells the app we want to log in a user\n * @param  {object} data          The data we're sending for log in\n * @param  {string} data.username The username of the user to log in\n * @param  {string} data.password The password of the user to log in\n */\nexport function loginRequest (data) {\n  return {type: LOGIN_REQUEST, data}\n}\n\n/**\n * Tells the app we want to log out a user\n */\nexport function logout () {\n  return {type: LOGOUT}\n}\n\n/**\n * Sets the `error` state to the error received\n * @param  {object} error The error we got when trying to make the request\n */\nexport function requestError (error) {\n  return {type: REQUEST_ERROR, error}\n}\n\nexport function getChannelsList () {\n  return {type: CHANNEL_LIST}\n}\n\n/**\n * Sets the `error` state as empty\n */\nexport function clearError () {\n  return {type: CLEAR_ERROR}\n}\n\nexport function submitMetacontent(metacontent) {\n  return {type: SUBMIT_METACONTENT, metacontent: metacontent}\n}\n\nexport function createMetacontent() {\n  return {type: CREATE_METACONTENT}\n}\n\nexport function deleteMetacontent(metacontent) {\n  return {type: DELETE_METACONTENT, metacontent: metacontent}\n}\n"]}